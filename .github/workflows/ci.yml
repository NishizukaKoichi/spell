name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: spell_test
          POSTGRES_PASSWORD: spell_test
          POSTGRES_DB: spell_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run database migrations
        run: |
          # Install sqlx-cli
          cargo install sqlx-cli --no-default-features --features postgres

          # Run migrations
          for migration in migrations/*.sql; do
            psql "postgres://spell_test:spell_test@localhost:5432/spell_test" < "$migration"
          done
        env:
          DATABASE_URL: postgres://spell_test:spell_test@localhost:5432/spell_test

      - name: Run tests
        run: cargo test --verbose
        env:
          DATABASE_URL: postgres://spell_test:spell_test@localhost:5432/spell_test

  lint:
    name: Lint (Clippy)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: spell_test
          POSTGRES_PASSWORD: spell_test
          POSTGRES_DB: spell_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run database migrations
        run: |
          cargo install sqlx-cli --no-default-features --features postgres
          for migration in migrations/*.sql; do
            psql "postgres://spell_test:spell_test@localhost:5432/spell_test" < "$migration"
          done
        env:
          DATABASE_URL: postgres://spell_test:spell_test@localhost:5432/spell_test

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        env:
          DATABASE_URL: postgres://spell_test:spell_test@localhost:5432/spell_test

  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit
        continue-on-error: true  # TODO Phase 4: Fix CVEs in sqlx, wasmtime, etc.

  sbom:
    name: SBOM Generation (§9.4)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-sbom
        run: cargo install cargo-sbom

      - name: Generate SBOM (SPDX + CycloneDX)
        run: ./scripts/generate_sbom.sh

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom/

  # Guard: All checks must pass
  guard:
    name: CI Guard (All Checks)
    runs-on: ubuntu-latest
    needs: [test, lint, format, security, sbom]
    if: always()
    steps:
      - name: Check all jobs passed
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.format.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.sbom.result }}" != "success" ]; then
            echo "❌ One or more CI checks failed"
            exit 1
          fi
          echo "✅ All CI checks passed"
